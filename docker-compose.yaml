version: '3.7'

volumes:
  pg_data: {}
  teamcity_data: {}
  metabase_data: {}


services:
  nginx:
    image: nginx
    volumes:
     - ./templates:/etc/nginx/templates
    ports:
     - "8080:80"
    environment:
     - NGINX_PORT=80

  web:
    image: httpd
    ports:
      - "80:80"
    logging:
      driver: "fluentd"
      options:
        fluentd-address: fluentd:24224
        tag: httpd.access

  fluentd:
    build: ./fluentd
    volumes:
      - ./fluentd:/fluentd/etc
    ports:
      - "24224:24224"
      - "24224:24224/udp"

  elasticsearch:
    image: bitnami/elasticsearch
    expose:
      - 9200
    ports:
      - "9200:9200"

  kibana:
    image: bitnami/kibana
    ports:
      - "5601:5601"

  clickhouse:
   image: yandex/clickhouse-server
   ports:
   - "8123:8123"
   - "9000:9000"
   - "9009:9009"
   ulimits:
    nproc: 65535
    nofile:
     soft: 262144
     hard: 262144

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor

    cadvisor:
      image: gcr.io/google-containers/cadvisor:v0.36.0
      container_name: cadvisor
      restart: always
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
      depends_on:
        - redis

  redis:
    image: redis:latest
    ports:
      - 6379:6379

  kafka:
    image: bitnami/kafka:2.6.0-debian-10-r69
    hostname: kafka-broker

  rabbitmq:
      image: rabbitmq:3-management-alpine
      volumes:
          - ./.docker/rabbitmq/etc/:/etc/rabbitmq/
          - ./.docker/rabbitmq/data/:/var/lib/rabbitmq/
          - ./.docker/rabbitmq/logs/:/var/log/rabbitmq/
      environment:
          RABBITMQ_DEFAULT_USER: "rabbitmq"
          RABBITMQ_DEFAULT_PASS: "rabbitmq"
      ports:
          - 5672:5672
          - 15672:15672

  grafana:
    image: grafana/grafana:5.1.0
    ports:
      - 3000:3000
    user: "104"

  postgres:
    image: postgres:13.2
    environment:
      - POSTGRES_PASSWORD=hbZkzny5xrvVH
    volumes:
      - pg_data:/var/lib/postgresql/data

  pgbouncer:
    image: edoburu/pgbouncer:1.11.0
    environment:
       - DB_USER=postgres
       - DB_PASSWORD=hbZkzny5xrvVH
       - DB_HOST=postgres
       - DB_NAME=postgres
       - POOL_MODE=transaction
       - ADMIN_USERS=postgres,dbuser
    ports:
      - 5432:5432
    depends_on:
      - postgres

  metabase:
    container_name: metabase
    restart: always
    image: metabase/metabase:v0.39.0.1
    volumes:
       - .metabase_data:/metabase-data
    ports:
       - 8085:3000


  teamcity-server:
    image: jetbrains/teamcity-server:2020.2.4
    container_name: teamcity-server
    restart: always
    volumes:
      - teamcity_data:/data/teamcity_server/datadir
    depends_on:
      - postgres

  teamcity-agent:
    container_name: teamcity-agent
    restart: always
    build:
      context: ./teamcity-agents
      dockerfile: python.Dockerfile
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
